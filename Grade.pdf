Grading for Dominuno's: Jane Kim, Kostas Gobakis, and Kelly Yang

Functionality: We think that the functionality of our game should receive high marks. We have very robust to keyboard inputs during runtime. We ran tests to check whether or not the dominoes in each player's hands were random, printed correctly, and did not repeat. We also ran tests to check whether or not the dominoes were placed correctly on the screen. The graphics were challenging; however we were able to configure the dominoes so that they fit in a user-friendly way on the screen (pressing the left arrows to move the dominoes on the table right or left). We also were able to implement mouse clicks so that the users would be able to click the domino they desire to place on the board and drag it to place on the board the user wants to place the desired domino. If the domino does not fit, the domino cannot be placed in the middle of the screen.

Design: Our design is pretty good. We think the design of our game to have two players play on the same screen is an interesting and creative touch especially for the combination between dominoes and uno (hence, Dominuno's) since it requires each user's hand to be hidden from his or her opponent. We worked and reworked the graphics so that the users would be able to play intuitively (clicking and dragging the domino to the location). We spent most of our time working on the design. If the user presses the space button, the player draws another tile. If the user sets down a special tile, either a skip - red tile, or draw one tile, his or her opponent will have their turn skipped and given another tile, respectively.

Creativity: This is an area where we think that we should receive full credit. We made a game not many people have done since it is very similar to games that are traditionally played with physical tiles or cards. In addition, Dominoes is not played all too often in the United States, which prompted us to do more research on the game and to see how it works. The rules are generally the same as dominoes, but we added a unique uno twist to it with special tiles that serve as advantages to whoever has that tile in their hand. We ran tests to see what number of special tiles would be optimal and fair to be in a pile of 28 dominoes. We found that having 1/14 of the pile being special dominoes (2 tiles that are chosen randomly while the pile is shuffled) would be the optimal choice since there is a one in 14 chance that each player would get a special domino in their hand. 

Sophistication: I think our game is rather sophisticated. Most of the sophistication of our project is in the design of the game as well as the rules. We had to make sure that the rules of the game fit well with the design. There many different pieces which all have to fit together well (the shuffling of the pile of dominoes, the special dominoes that are randomly selected, the dominoes in each player's hand, the dominoes that are selected and must be placed correctly on the table, and the fact that we use the mouse clicks to choose and place the domino in certain locations, and the fact that two players play on the same screen without revealing their own hand to their opponent with smooth animations.

Broadness: We ticked boxes 1, 2, 3, 5, 7, 8. Here’s where we used each and how it was justified:

      1. Java libraries that we haven’t seen in class: import java.awt.event.MouseAdapter, import java.awt.event.MouseEvent, and import java.awt.event.MouseListener to name a few!
      2. Subclassing ( `extends`):  InputMouseEvents extends MouseAdapter, InputKeyEvents extends KeyAdapter, drawing extends JPanel implements ActionListener
      3. Interfaces ( `implements`): drawing extends JPanel implements ActionListener
      5. Built in data structures
      7. Randomization: Used this to shuffle the pile of dominoes and to randomly select the 2 special tiles (1 skip, 1 draw one tile)
      8. Generics: 

Code Quality: We followed the same commenting style as seen in Project 1 and 2. In addition, we used the following naming scheme for methods/variables […]. Also, to make sure the rules of Tetris were followed, we coded up many tests. See `testRules.java` for these.
